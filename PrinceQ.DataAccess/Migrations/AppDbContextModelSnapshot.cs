// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrinceQ.DataAccess.Data.Context;

#nullable disable

namespace PrinceQ.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f626b751-35a0-43df-8173-76cb5b4886fd",
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c"
                        },
                        new
                        {
                            UserId = "cadf9177-f64e-4ab6-bb37-f50770ef67b5",
                            RoleId = "3462t34c-64b4-2341-6532-c3b7f7b72477"
                        },
                        new
                        {
                            UserId = "3386761a-6384-4e97-9eb3-d2d09e6bfec5",
                            RoleId = "fbc43974-ddf4-4fed-8a0b-42e6897f259f"
                        },
                        new
                        {
                            UserId = "5817a627-dcb6-4612-85e5-13b56dc52560",
                            RoleId = "fbc43974-ddf4-4fed-8a0b-42e6897f259f"
                        },
                        new
                        {
                            UserId = "6a3e3e42-a9d7-4ce4-b97a-1f3a3007c8b4",
                            RoleId = "fbc43974-ddf4-4fed-8a0b-42e6897f259f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Access", b =>
                {
                    b.Property<int>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccessId"));

                    b.Property<string>("AccessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("AccessId");

                    b.ToTable("Access");

                    b.HasData(
                        new
                        {
                            AccessId = 1,
                            AccessName = "GenerateNumber"
                        },
                        new
                        {
                            AccessId = 2,
                            AccessName = "ForFilling"
                        },
                        new
                        {
                            AccessId = 3,
                            AccessName = "Releasing"
                        },
                        new
                        {
                            AccessId = 4,
                            AccessName = "Announcement"
                        },
                        new
                        {
                            AccessId = 5,
                            AccessName = "Video"
                        },
                        new
                        {
                            AccessId = 6,
                            AccessName = "Users"
                        },
                        new
                        {
                            AccessId = 7,
                            AccessName = "Roles"
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActiveId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsActiveId");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsActiveId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("IsActiveId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Category A",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Trade",
                            IsActiveId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Category B",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-Trade",
                            IsActiveId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Category C",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Special",
                            IsActiveId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Category D",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Inquiry",
                            IsActiveId = 1
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.ClerkIPAddress", b =>
                {
                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClerkNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IPAddress");

                    b.HasIndex("UserId");

                    b.ToTable("Device");

                    b.HasData(
                        new
                        {
                            IPAddress = "10.64.14.50",
                            ClerkNumber = "Clerk 1"
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Clerk_Serve_ForFilling", b =>
                {
                    b.Property<string>("GenerateDate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClerkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Serve_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Serve_start")
                        .HasColumnType("datetime2");

                    b.HasKey("GenerateDate", "ClerkId", "CategoryId", "QueueNumber");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClerkId");

                    b.ToTable("Clerk_Serve_ForFilling");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Clerk_Serve_Releasing", b =>
                {
                    b.Property<string>("GenerateDate")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClerkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Serve_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Serve_start")
                        .HasColumnType("datetime2");

                    b.HasKey("GenerateDate", "ClerkId", "CategoryId", "QueueNumber");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClerkId");

                    b.ToTable("Clerk_Serve_Releasing");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.IsActive", b =>
                {
                    b.Property<int>("IsActiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IsActiveId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IsActiveId");

                    b.ToTable("IsActive");

                    b.HasData(
                        new
                        {
                            IsActiveId = 1,
                            Name = "Active"
                        },
                        new
                        {
                            IsActiveId = 2,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Queue_Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Queue_Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "waiting"
                        },
                        new
                        {
                            StatusId = 2,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "serve"
                        },
                        new
                        {
                            StatusId = 3,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "reserve"
                        },
                        new
                        {
                            StatusId = 4,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "cancel"
                        },
                        new
                        {
                            StatusId = 5,
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "serving"
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Queues", b =>
                {
                    b.Property<string>("QueueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Cancelled_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClerkId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ForFilling_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ForFilling_start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Releasing_end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Releasing_start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Reserve_At")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StageId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("Total_Cheques")
                        .HasColumnType("int");

                    b.HasKey("QueueId", "CategoryId", "QueueNumber");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClerkId");

                    b.HasIndex("StageId");

                    b.HasIndex("StatusId");

                    b.ToTable("QueueNumbers");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Role_Access", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "AccessId");

                    b.HasIndex("AccessId");

                    b.ToTable("Role_Access");

                    b.HasData(
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            AccessId = 1
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            AccessId = 2
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            AccessId = 3
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            AccessId = 4
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            AccessId = 5
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            AccessId = 6
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            AccessId = 7
                        },
                        new
                        {
                            RoleId = "3462t34c-64b4-2341-6532-c3b7f7b72477",
                            AccessId = 1
                        },
                        new
                        {
                            RoleId = "3462t34c-64b4-2341-6532-c3b7f7b72477",
                            AccessId = 2
                        },
                        new
                        {
                            RoleId = "3462t34c-64b4-2341-6532-c3b7f7b72477",
                            AccessId = 3
                        },
                        new
                        {
                            RoleId = "fbc43974-ddf4-4fed-8a0b-42e6897f259f",
                            AccessId = 1
                        },
                        new
                        {
                            RoleId = "fbc43974-ddf4-4fed-8a0b-42e6897f259f",
                            AccessId = 2
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Serving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("QueueNumberServe")
                        .HasColumnType("int");

                    b.Property<DateTime>("Served_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Serving");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Stage_Queue", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StageId"));

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageId");

                    b.ToTable("Stage");

                    b.HasData(
                        new
                        {
                            StageId = 1,
                            StageName = "Filling"
                        },
                        new
                        {
                            StageId = 2,
                            StageName = "Releasing"
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IsActiveId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsActiveId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3386761a-6384-4e97-9eb3-d2d09e6bfec5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79681f10-0ee2-4127-9e9c-0eb73ded94fe",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@princeretail.com",
                            EmailConfirmed = false,
                            IsActiveId = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@PRINCERETAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAECnnqwWvQxblMxWGHvFRkui6EcfZu6BPqf2MtI8fZS9u6gCf8BWu3bZIc1xF16W6zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GJ636UXBBLKO5JOGP6X3WISMIEBRVVHM",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "5817a627-dcb6-4612-85e5-13b56dc52560",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c935029b-a917-4967-b007-18bd2ccaa9fb",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@princeretail.com",
                            EmailConfirmed = false,
                            IsActiveId = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@PRINCERETAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVWq2Lhee6lgjGXwYSWbtfzS4JYT0MEYWaOs6USpgbOBGJEaO1KB8YxDLviUH8eag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TH3JDB7PM7WMDGG4OYPLQKLGA5ECC4T3",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "6a3e3e42-a9d7-4ce4-b97a-1f3a3007c8b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecfd0212-7008-485f-aca1-ba1c17ac009c",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@princeretail.com",
                            EmailConfirmed = false,
                            IsActiveId = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@PRINCERETAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEOIf7eXfV9kI/xsnNgDanLoBQLRGl1+jrl1+BJvGqblI7v/VTSx4C3/LJTGi4oBC7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5BJYPNN2TLNSI55R6RGCHCK4F3Z4QCXA",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "cadf9177-f64e-4ab6-bb37-f50770ef67b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b25f225-70d8-48be-a06f-46a91475d5f8",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "personnel1@princeretail.com",
                            EmailConfirmed = false,
                            IsActiveId = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "PERSONNEL1@PRINCERETAIL.COM",
                            NormalizedUserName = "PERSONNEL1",
                            PasswordHash = "AQAAAAIAAYagAAAAEHX+4UDDHRNT58qxXn8u5YlDjkKG+bJTVvoDKEvtOPFF3/z+o/4ZbJ3CIv0+W/mZjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6WJLAWNDIARO6JH6N3T7AM224IYQLRO4",
                            TwoFactorEnabled = false,
                            UserName = "personnel1"
                        },
                        new
                        {
                            Id = "f626b751-35a0-43df-8173-76cb5b4886fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68094bf9-de7e-4b21-a651-b741ae57c6aa",
                            Created_At = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@princeretail.com",
                            EmailConfirmed = false,
                            IsActiveId = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@PRINCERETAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpB1HfJeqVp4SjIDJMOHVIEmfY55M/N7YsXHENkNlge5P6k15rYKenBWVNTobCO0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "N36KZ2J262FG2K5NWBB3WESIUXPLZ5WH",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.User_Category", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("User_Category");

                    b.HasData(
                        new
                        {
                            UserId = "3386761a-6384-4e97-9eb3-d2d09e6bfec5",
                            CategoryId = 1
                        },
                        new
                        {
                            UserId = "3386761a-6384-4e97-9eb3-d2d09e6bfec5",
                            CategoryId = 2
                        },
                        new
                        {
                            UserId = "3386761a-6384-4e97-9eb3-d2d09e6bfec5",
                            CategoryId = 3
                        },
                        new
                        {
                            UserId = "3386761a-6384-4e97-9eb3-d2d09e6bfec5",
                            CategoryId = 4
                        },
                        new
                        {
                            UserId = "5817a627-dcb6-4612-85e5-13b56dc52560",
                            CategoryId = 1
                        },
                        new
                        {
                            UserId = "5817a627-dcb6-4612-85e5-13b56dc52560",
                            CategoryId = 2
                        },
                        new
                        {
                            UserId = "5817a627-dcb6-4612-85e5-13b56dc52560",
                            CategoryId = 3
                        },
                        new
                        {
                            UserId = "5817a627-dcb6-4612-85e5-13b56dc52560",
                            CategoryId = 4
                        },
                        new
                        {
                            UserId = "6a3e3e42-a9d7-4ce4-b97a-1f3a3007c8b4",
                            CategoryId = 1
                        },
                        new
                        {
                            UserId = "6a3e3e42-a9d7-4ce4-b97a-1f3a3007c8b4",
                            CategoryId = 2
                        },
                        new
                        {
                            UserId = "6a3e3e42-a9d7-4ce4-b97a-1f3a3007c8b4",
                            CategoryId = 3
                        },
                        new
                        {
                            UserId = "6a3e3e42-a9d7-4ce4-b97a-1f3a3007c8b4",
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Roles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Roles");

                    b.HasData(
                        new
                        {
                            Id = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3462t34c-64b4-2341-6532-c3b7f7b72477",
                            Name = "Staff1",
                            NormalizedName = "STAFF1"
                        },
                        new
                        {
                            Id = "fbc43974-ddf4-4fed-8a0b-42e6897f259f",
                            Name = "Staff2",
                            NormalizedName = "STAFF2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrinceQ.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Announcement", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.IsActive", "IsActive")
                        .WithMany()
                        .HasForeignKey("IsActiveId");

                    b.Navigation("IsActive");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Category", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.IsActive", "IsActive")
                        .WithMany()
                        .HasForeignKey("IsActiveId");

                    b.Navigation("IsActive");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.ClerkIPAddress", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Clerk_Serve_ForFilling", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrinceQ.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("ClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Clerk_Serve_Releasing", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrinceQ.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("ClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Queues", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrinceQ.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("ClerkId");

                    b.HasOne("PrinceQ.Models.Entities.Stage_Queue", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.HasOne("PrinceQ.Models.Entities.Queue_Status", "QueueStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("QueueStatus");

                    b.Navigation("Stage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Role_Access", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.Access", "Access")
                        .WithMany()
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrinceQ.Models.Entities.Roles", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Access");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.Serving", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrinceQ.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.User", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.IsActive", "IsActive")
                        .WithMany()
                        .HasForeignKey("IsActiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IsActive");
                });

            modelBuilder.Entity("PrinceQ.Models.Entities.User_Category", b =>
                {
                    b.HasOne("PrinceQ.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrinceQ.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
